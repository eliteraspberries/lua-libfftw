-- Copyright 2019, Mansour Moufid <mansourmoufid@gmail.com>

local {{name}} = {}

local ffi = require('ffi')

local lib{{libname}} = ffi.load('{{libname}}')

{{name}}.FFTW_BACKWARD = 1
{{name}}.FFTW_ESTIMATE = 64
{{name}}.FFTW_FORWARD = -1
{{name}}.FFTW_MEASURE = 0

ffi.cdef([[
    struct {{name}}_plan_s {
        void *pln;
        void *prb;
        int sign;
    };
    typedef struct {{name}}_plan_s *{{name}}_plan;
    {{name}}_plan {{name}}_plan_dft_r2c_1d(int, float *, void *, unsigned);
    {{name}}_plan {{name}}_plan_dft_c2r_1d(int, void *, float *, unsigned);
    void {{name}}_destroy_plan({{name}}_plan);
    void {{name}}_execute(const {{name}}_plan);
    void {{name}}_execute_dft_r2c(const {{name}}_plan, float *, void *);
    void {{name}}_execute_dft_c2r(const {{name}}_plan, void *, float *);
]])

{{name}}.plans = {}
{{name}}.threads = false

function {{name}}.plan_dft(n, x, X)
    if {{name}}.plans[n] == nil then
        local flags = {{name}}.FFTW_ESTIMATE
        {{name}}.plans[n] = {
            lib{{libname}}.{{name}}_plan_dft_r2c_1d(n, x, X, flags),
            lib{{libname}}.{{name}}_plan_dft_c2r_1d(n, X, x, flags),
        }
    end
    return {{name}}.plans[n]
end

local function mid(n)
    return math.ceil((n - 1) / 2) + 1
end

function {{name}}.rfft(x, n, X)
    local plans = {{name}}.plan_dft(n, x, X)
    lib{{libname}}.{{name}}_execute_dft_r2c(plans[1], x, X)
    if n > 2 then
        for i = mid(n), n - 1 do
            X[i] = 0
        end
    end
end

function {{name}}.irfft(X, n, x)
    local plans = {{name}}.plan_dft(n, x, X)
    lib{{libname}}.{{name}}_execute_dft_c2r(plans[2], X, x)
    local d = 1 / n
    for i = 0, n - 1 do
        x[i] = x[i] * d
    end
end

local suffixes = {'_omp', '_threads'}
for _, suffix in pairs(suffixes) do
    local ok, result = pcall(ffi.load, libname)
    if ok then
        local lib = result
        {{name}}.threads = true
        {{name}}.init_threads = function ()
            lib.{{name}}_init_threads()
        end
        {{name}}.plan_with_nthreads = function (n)
            lib.{{name}}_plan_with_nthreads(n)
        end
        break
    end
end

return {{name}}
